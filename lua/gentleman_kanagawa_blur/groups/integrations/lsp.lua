local p = require("gentleman_kanagawa_blur.palette")
return {
	-- LSP Semantic Token Groups
	["@lsp.type.boolean"] = { link = "@boolean" },
	["@lsp.type.builtinType"] = { link = "@type.builtin" },
	["@lsp.type.comment"] = { link = "@comment" },
	["@lsp.type.enum"] = { link = "@type" },
	["@lsp.type.enumMember"] = { link = "@constant" },
	["@lsp.type.escapeSequence"] = { link = "@string.escape" },
	["@lsp.type.formatSpecifier"] = { link = "@punctuation.special" },
	["@lsp.type.interface"] = { fg = p.type_interface },
	["@lsp.type.macro"] = { fg = p.function_ },
	["@lsp.type.keyword"] = { link = "@keyword" },
	["@lsp.type.namespace"] = { link = "@namespace" },
	["@lsp.type.number"] = { link = "@number" },
	["@lsp.type.operator"] = { link = "@operator" },
	["@lsp.type.parameter"] = { link = "@parameter" },
	["@lsp.type.property"] = { link = "@property" },
	["@lsp.type.selfKeyword"] = { link = "@variable.builtin" },
	["@lsp.type.string.rust"] = { link = "@string" },
	["@lsp.type.typeAlias"] = { link = "@type.definition" },
	["@lsp.type.unresolvedReference"] = { undercurl = true, sp = p.variable },
	["@lsp.mod.readonly"] = { link = "@constant" },
	["@lsp.typemod.function.readonly"] = { fg = p.function_ },
	["@lsp.typemod.variable.declaration"] = { fg = p.variable },
	["@lsp.typemod.property"] = { fg = p.property },
	["@lsp.typemod.class.defaultLibrary"] = { link = "@type.builtin" },
	["@lsp.typemod.enum.defaultLibrary"] = { link = "@type.builtin" },
	["@lsp.typemod.enumMember.defaultLibrary"] = { link = "@constant.builtin" },
	["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
	["@lsp.typemod.keyword.async"] = { link = "@keyword.coroutine" },
	["@lsp.typemod.macro.defaultLibrary"] = { link = "@function.builtin" },
	["@lsp.typemod.method.defaultLibrary"] = { link = "@function.builtin" },
	["@lsp.typemod.operator.injected"] = { link = "@operator" },
	["@lsp.typemod.string.injected"] = { link = "@string" },
	["@lsp.typemod.type.defaultLibrary"] = { fg = p.type },
	["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
	["@lsp.typemod.variable.injected"] = { link = "@variable" },
	-- Diagnostics con subtle backgrounds
	DiagnosticOk = { fg = p.enum },
	DiagnosticError = { fg = p.variable },
	DiagnosticWarn = { fg = p.string },
	DiagnosticInfo = { fg = p.function_ },
	DiagnosticHint = { fg = p.cyan },
	DiagnosticUnderlineError = { bg = p.surface0 },
	DiagnosticUnderlineWarn = { bg = p.surface0 },
	DiagnosticUnderlineInfo = { bg = p.surface0 },
	DiagnosticUnderlineHint = { bg = p.surface0 },

	-- LSP Reference highlighting con subtle background (sin underline)
	LspReferenceWrite = { bg = p.surface1 },
	LspReferenceText = { bg = p.surface1 },
	LspReferenceRead = { bg = p.surface1 },
	LspSignatureActiveParameter = { fg = p.operator, bold = true },
}
